{"version":3,"sources":["Resume.js","App.js","serviceWorker.js","index.js","person.svg"],"names":["Resume","prop","info","data","profiles","location","id","className","src","profileIcon","alt","style","width","basics","name","fontStyle","role","href","email","mobile","address","summary","map","summaryValue","summaryIndex","key","education","educationValue","educationIndex","degree","institute","result","skills","skillsValue","skillsIndex","languages","languagesValue","languagesIndex","clubs","clubsValue","clubsIndex","Example","Home","console","log","value","index","boxShadow","to","pathname","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.28e0909c.chunk.js","sourcesContent":["import React from 'react';\r\nimport data from './data/data.json';\r\nimport profileIcon from './person.svg';\r\n\r\nlet Resume = (prop) => {\r\n    let info = data.profiles[prop.location.data.id];\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            {/* Left part*/}\r\n            <div className=\"col-lg-3 m-2\">\r\n                <div className=\"card shadow\">\r\n                    <div className=\"card-body p-2 text-center\">\r\n                        <img src={profileIcon} alt=\"Profile icon\" style={{ width: \"15%\" }} />\r\n                        <h2>{info.basics.name} </h2>\r\n                        <h5 className=\"text-secondary\" style={{ fontStyle: \"italic\" }}>{info.basics.role}</h5> <hr />\r\n                        <a href={\"mailto:\" + info.basics.email}> {info.basics.email}</a> <br>\r\n                        </br>\r\n                        <a href={\"tel:\" + info.basics.mobile}>{info.basics.mobile}</a><br />\r\n                        <p>{info.basics.address} </p>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            {/*Right part*/}\r\n            <div className=\"col-lg-8 m-2\">\r\n                <div className=\"card shadow\">\r\n                    <div className=\"card-body p-2\">\r\n\r\n\r\n\r\n                        <h3> Summary</h3> <hr />\r\n                        <ul>\r\n                            {info.summary.map((summaryValue, summaryIndex) => (\r\n                                <li key={summaryIndex}>\r\n                                    {summaryValue}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n\r\n\r\n                        \r\n                        <h3>Educational Qualifications</h3><hr />\r\n                        <div className=\"table-responsive\">\r\n                            <table className=\"table table-bordered\">\r\n                                <thead className=\"thead-dark\">\r\n                                    <tr>\r\n                                        <th>Degree</th>\r\n                                        <th>Institute</th>\r\n                                        <th>Percentage</th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {info.education.map((educationValue, educationIndex) => (\r\n                                        <tr key={educationIndex}>\r\n                                            <td>{educationValue.degree} </td>\r\n                                            <td>{educationValue.institute} </td>\r\n                                            <td>{educationValue.result} </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n\r\n                            </table>\r\n                        </div>\r\n\r\n\r\n                        <h3> Skills</h3> <hr />\r\n                        <ul>\r\n                            {info.skills.map((skillsValue, skillsIndex) => (\r\n                                <li key={skillsIndex}>\r\n                                    {skillsValue}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n\r\n                        <h3> Languages</h3> <hr />\r\n                        <ul>\r\n                            {info.languages.map((languagesValue, languagesIndex) => (\r\n                                <li key={languagesIndex}>\r\n                                    {languagesValue}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n\r\n\r\n                        <h3> Activities</h3> <hr />\r\n                        <ul>\r\n                            {info.clubs.map((clubsValue, clubsIndex) => (\r\n                                <li key={clubsIndex}>\r\n                                    {clubsValue}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resume;","import React from 'react';\nimport data from './data/data.json';\nimport profileIcon from './person.svg';\nimport { BrowserRouter, Route, Switch, Link } from 'react-router-dom';\nimport Resume from './Resume';\n\n\nlet App = () => {\n  return (\n\n    <BrowserRouter>\n      <Switch>\n        <Route exact path='/sample' component={Example} />\n        <Route exact path='/home' component={Home} />\n        <Route exact path='/resume' component={Resume} />\n      </Switch>\n    </BrowserRouter>\n  )\n}\n\n\nlet Example = () => {\n  return (\n    <div>\n      <h2> Example component</h2>\n    </div>\n  )\n}\n\n\n\n\nlet Home = () => {\n  let profiles = data.profiles;\n  console.log(profiles);\n  return (\n    <div className=\"row justify-content-center\">\n      {profiles.map((value, index) => (\n        <div className=\"col-lg-4 col-md-4 col-sm-10 mt-1 \" key={index}>\n          {/* Card */}\n          <div className=\"card\" style={{ boxShadow: \"0px 8px 8px -8px #000\" }}>\n            <div className=\"card-body text-center\">\n              <img src={profileIcon} alt=\"Profile icon\" style={{ width: \"15%\" }} />\n              <h3> {value.basics.name} </h3>\n              <h5 className=\"text-secondary\" style={{ fontStyle: \"italic\" }}>{value.basics.role}</h5> <hr />\n              <a href={\"mailto:\" + value.basics.email}> {value.basics.email}</a> <br>\n              </br>\n              <a href={\"tel:\" + value.basics.mobile}>{value.basics.mobile}</a><br />\n              <Link to={{ pathname: '/resume', data: { id: index } }} className=\"btn btn-secondary text-white btn-block btn-sm\"> View profile</Link>\n\n\n            </div>\n          </div>\n        </div>\n\n      ))}\n\n    </div>\n  )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/person.ac9b2f70.svg\";"],"sourceRoot":""}